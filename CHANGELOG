2014-06-02  Dmitry Anoshin  <anoshindx@gmail.com>

    Django versions support: 1.6 - 1.7

    * FIX Forking bug: Deep forking was cut at second object with backward
    relations.

    * Change deprecated transaction.commit_on_success to transaction.atomic.

2011-10-10  Byron Ruth  <ruthb@email.chop.edu>

	* Arbitrary Signal Keyword Arguments. Each utility function can take any
	additional keyword arguments that will be passed to each signal receiver
	called for the entirety of the operation.

2011-10-07  Byron Ruth  <ruthb@email.chop.edu>

	* Deep Reset. Improved deep reset capability which does not incorrectly
	fork related objects. In this implementation, only directly related
	objects are traversed.

2011-10-05  Byron Ruth  <ruthb@email.chop.edu>

	* Pre and Post Signals. Signals have been implemented for customizing the
	behavior of a `fork', `reset', `diff', and `commit' outside of the normal
	use of the API. The sender of the each signal is the model class of the
	model instance being manipulated.

	The `fork', `reset', and `diff' pre- signals pass the `reference',
	`instance', and `config' to the receiver. The `config' is a `dict' which
	can be updated in-place for greater flexibility.

2011-10-04  Byron Ruth  <ruthb@email.chop.edu>

	* API Refactor. Public methods including `fork', `reset', `diff', and
	`commit' have been defined as standalone functions. This refactor
	emphasizes greater coverage of applicability for all existing models
	rather than only those that inherit from `ForkableModel'. `ForkableModel'
	still contains the public methods for backwards compatibility and
	convenience.

2011-09-09  Byron Ruth  <ruthb@email.chop.edu>

	* Reset Method. Added `reset' method which requires a model instance
	`target' that enables "resetting" an existing object rather than creating
	a new object per `fork'.

2011-09-09  Byron Ruth  <ruthb@email.chop.edu>

	* Forking. Implemented an abstract model class `ForkableModel' which
	supports shallow and deep forking model instances.
	
	* Deferred Commits. All relationships are deferred from being saved until
	the whole hierarchy has been traversed during forking. Forks are not
	committed by default to ensure integrity errors are not forced.

	* Diffs. `ForkableModel' also implements a `diff' method for instances
	that can be used to compare data values against another object of the same
	type.

	* Limitations. `through' models for many-to-many fields are not yet
	supported. Deep diffs are not yet supported.
